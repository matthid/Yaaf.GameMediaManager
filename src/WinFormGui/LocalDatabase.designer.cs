#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.269
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Yaaf.WirePlugin.WinFormGui.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="D:\\projects\\aktuell\\wireyaafcssplugin\\yaaf\\src\\WinFormGui\\LocalDatabase.sdf")]
	public partial class LocalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertActionObject(ActionObject instance);
    partial void UpdateActionObject(ActionObject instance);
    partial void DeleteActionObject(ActionObject instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertMatchFormAction(MatchFormAction instance);
    partial void UpdateMatchFormAction(MatchFormAction instance);
    partial void DeleteMatchFormAction(MatchFormAction instance);
    partial void InsertMatchmedia(Matchmedia instance);
    partial void UpdateMatchmedia(Matchmedia instance);
    partial void DeleteMatchmedia(Matchmedia instance);
    partial void InsertMatchmedia_Tag(Matchmedia_Tag instance);
    partial void UpdateMatchmedia_Tag(Matchmedia_Tag instance);
    partial void DeleteMatchmedia_Tag(Matchmedia_Tag instance);
    partial void InsertMatchSession(MatchSession instance);
    partial void UpdateMatchSession(MatchSession instance);
    partial void DeleteMatchSession(MatchSession instance);
    partial void InsertMatchSessions_Player(MatchSessions_Player instance);
    partial void UpdateMatchSessions_Player(MatchSessions_Player instance);
    partial void DeleteMatchSessions_Player(MatchSessions_Player instance);
    partial void InsertMatchSessions_Tag(MatchSessions_Tag instance);
    partial void UpdateMatchSessions_Tag(MatchSessions_Tag instance);
    partial void DeleteMatchSessions_Tag(MatchSessions_Tag instance);
    partial void InsertObjectParameter(ObjectParameter instance);
    partial void UpdateObjectParameter(ObjectParameter instance);
    partial void DeleteObjectParameter(ObjectParameter instance);
    partial void InsertPlayer_Tag(Player_Tag instance);
    partial void UpdatePlayer_Tag(Player_Tag instance);
    partial void DeletePlayer_Tag(Player_Tag instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertWatchFolder(WatchFolder instance);
    partial void UpdateWatchFolder(WatchFolder instance);
    partial void DeleteWatchFolder(WatchFolder instance);
    #endregion
		
		public LocalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<ActionObject> ActionObjects
		{
			get
			{
				return this.GetTable<ActionObject>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<MatchFormAction> MatchFormActions
		{
			get
			{
				return this.GetTable<MatchFormAction>();
			}
		}
		
		public System.Data.Linq.Table<Matchmedia> Matchmedias
		{
			get
			{
				return this.GetTable<Matchmedia>();
			}
		}
		
		public System.Data.Linq.Table<Matchmedia_Tag> Matchmedia_Tags
		{
			get
			{
				return this.GetTable<Matchmedia_Tag>();
			}
		}
		
		public System.Data.Linq.Table<MatchSession> MatchSessions
		{
			get
			{
				return this.GetTable<MatchSession>();
			}
		}
		
		public System.Data.Linq.Table<MatchSessions_Player> MatchSessions_Players
		{
			get
			{
				return this.GetTable<MatchSessions_Player>();
			}
		}
		
		public System.Data.Linq.Table<MatchSessions_Tag> MatchSessions_Tags
		{
			get
			{
				return this.GetTable<MatchSessions_Tag>();
			}
		}
		
		public System.Data.Linq.Table<ObjectParameter> ObjectParameters
		{
			get
			{
				return this.GetTable<ObjectParameter>();
			}
		}
		
		public System.Data.Linq.Table<Player_Tag> Player_Tags
		{
			get
			{
				return this.GetTable<Player_Tag>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<WatchFolder> WatchFolders
		{
			get
			{
				return this.GetTable<WatchFolder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Actions")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id = default(int);
		
		private string _Name;
		
		private byte _Parameters;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParametersChanging(byte value);
    partial void OnParametersChanged();
    #endregion
		
		public Action()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL UNIQUE", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameters", DbType="TinyInt NOT NULL")]
		public byte Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ActionObjects")]
	public partial class ActionObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ActionId;
		
		private System.Nullable<int> _FilterId;
		
		private string _Name;
		
		private EntitySet<ObjectParameter> _ObjectParameter;
		
		private EntityRef<Action> _ActionAndFilter;
		
		private EntityRef<ActionObject> _NextActionObject;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnActionIdChanging(int value);
    partial void OnActionIdChanged();
    partial void OnNextActionObjectIdChanging(System.Nullable<int> value);
    partial void OnNextActionObjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ActionObject()
		{
			this._ObjectParameter = new EntitySet<ObjectParameter>(new Action<ObjectParameter>(this.attach_ObjectParameter), new Action<ObjectParameter>(this.detach_ObjectParameter));
			this._ActionAndFilter = default(EntityRef<Action>);
			this._NextActionObject = default(EntityRef<ActionObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionId", DbType="Int NOT NULL")]
		public int ActionId
		{
			get
			{
				return this._ActionId;
			}
			set
			{
				if ((this._ActionId != value))
				{
					if (this._ActionAndFilter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIdChanging(value);
					this.SendPropertyChanging();
					this._ActionId = value;
					this.SendPropertyChanged("ActionId");
					this.OnActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterId", DbType="Int")]
		public System.Nullable<int> NextActionObjectId
		{
			get
			{
				return this._FilterId;
			}
			set
			{
				if ((this._FilterId != value))
				{
					if (this._NextActionObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextActionObjectIdChanging(value);
					this.SendPropertyChanging();
					this._FilterId = value;
					this.SendPropertyChanged("NextActionObjectId");
					this.OnNextActionObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL UNIQUE", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionObject_ObjectParameter", Storage="_ObjectParameter", ThisKey="Id", OtherKey="ObjectId")]
		public EntitySet<ObjectParameter> ObjectParameter
		{
			get
			{
				return this._ObjectParameter;
			}
			set
			{
				this._ObjectParameter.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_ActionObject", Storage="_ActionAndFilter", ThisKey="ActionId", OtherKey="Id", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._ActionAndFilter.Entity;
			}
			set
			{
				if ((this._ActionAndFilter.Entity != value))
				{
					this.SendPropertyChanging();
					this._ActionAndFilter.Entity = value;
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionObject_ActionObject", Storage="_NextActionObject", ThisKey="NextActionObjectId", OtherKey="Id", IsForeignKey=true)]
		public ActionObject NextActionObject
		{
			get
			{
				return this._NextActionObject.Entity;
			}
			set
			{
				if ((this._NextActionObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._NextActionObject.Entity = value;
					this.SendPropertyChanged("NextActionObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ObjectParameter(ObjectParameter entity)
		{
			this.SendPropertyChanging();
			entity.ActionObject = this;
		}
		
		private void detach_ObjectParameter(ObjectParameter entity)
		{
			this.SendPropertyChanging();
			entity.ActionObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Shortname;
		
		private bool _EnableNotification;
		
		private bool _EnableMatchForm;
		
		private bool _EnablePublicNotification;
		
		private bool _EnableWarMatchForm;
		
		private bool _WarMatchFormSaveFiles;
		
		private bool _PublicMatchFormSaveFiles;
		
		private EntitySet<MatchFormAction> _MatchFormAction;
		
		private EntitySet<MatchSession> _MatchSession;
		
		private EntitySet<WatchFolder> _WatchFolder;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortnameChanging(string value);
    partial void OnShortnameChanged();
    partial void OnEnableNotificationChanging(bool value);
    partial void OnEnableNotificationChanged();
    partial void OnEnableMatchFormChanging(bool value);
    partial void OnEnableMatchFormChanged();
    partial void OnEnablePublicNotificationChanging(bool value);
    partial void OnEnablePublicNotificationChanged();
    partial void OnEnableWarMatchFormChanging(bool value);
    partial void OnEnableWarMatchFormChanged();
    partial void OnWarMatchFormSaveFilesChanging(bool value);
    partial void OnWarMatchFormSaveFilesChanged();
    partial void OnPublicMatchFormSaveFilesChanging(bool value);
    partial void OnPublicMatchFormSaveFilesChanged();
    #endregion
		
		public Game()
		{
			this._MatchFormAction = new EntitySet<MatchFormAction>(new Action<MatchFormAction>(this.attach_MatchFormAction), new Action<MatchFormAction>(this.detach_MatchFormAction));
			this._MatchSession = new EntitySet<MatchSession>(new Action<MatchSession>(this.attach_MatchSession), new Action<MatchSession>(this.detach_MatchSession));
			this._WatchFolder = new EntitySet<WatchFolder>(new Action<WatchFolder>(this.attach_WatchFolder), new Action<WatchFolder>(this.detach_WatchFolder));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL UNIQUE", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortname", DbType="NVarChar(20) NOT NULL UNIQUE", CanBeNull=false)]
		public string Shortname
		{
			get
			{
				return this._Shortname;
			}
			set
			{
				if ((this._Shortname != value))
				{
					this.OnShortnameChanging(value);
					this.SendPropertyChanging();
					this._Shortname = value;
					this.SendPropertyChanged("Shortname");
					this.OnShortnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableNotification", DbType="Bit NOT NULL")]
		public bool EnableNotification
		{
			get
			{
				return this._EnableNotification;
			}
			set
			{
				if ((this._EnableNotification != value))
				{
					this.OnEnableNotificationChanging(value);
					this.SendPropertyChanging();
					this._EnableNotification = value;
					this.SendPropertyChanged("EnableNotification");
					this.OnEnableNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableMatchForm", DbType="Bit NOT NULL")]
		public bool EnableMatchForm
		{
			get
			{
				return this._EnableMatchForm;
			}
			set
			{
				if ((this._EnableMatchForm != value))
				{
					this.OnEnableMatchFormChanging(value);
					this.SendPropertyChanging();
					this._EnableMatchForm = value;
					this.SendPropertyChanged("EnableMatchForm");
					this.OnEnableMatchFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnablePublicNotification", DbType="Bit NOT NULL")]
		public bool EnablePublicNotification
		{
			get
			{
				return this._EnablePublicNotification;
			}
			set
			{
				if ((this._EnablePublicNotification != value))
				{
					this.OnEnablePublicNotificationChanging(value);
					this.SendPropertyChanging();
					this._EnablePublicNotification = value;
					this.SendPropertyChanged("EnablePublicNotification");
					this.OnEnablePublicNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableWarMatchForm", DbType="Bit NOT NULL")]
		public bool EnableWarMatchForm
		{
			get
			{
				return this._EnableWarMatchForm;
			}
			set
			{
				if ((this._EnableWarMatchForm != value))
				{
					this.OnEnableWarMatchFormChanging(value);
					this.SendPropertyChanging();
					this._EnableWarMatchForm = value;
					this.SendPropertyChanged("EnableWarMatchForm");
					this.OnEnableWarMatchFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarMatchFormSaveFiles", DbType="Bit NOT NULL")]
		public bool WarMatchFormSaveFiles
		{
			get
			{
				return this._WarMatchFormSaveFiles;
			}
			set
			{
				if ((this._WarMatchFormSaveFiles != value))
				{
					this.OnWarMatchFormSaveFilesChanging(value);
					this.SendPropertyChanging();
					this._WarMatchFormSaveFiles = value;
					this.SendPropertyChanged("WarMatchFormSaveFiles");
					this.OnWarMatchFormSaveFilesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicMatchFormSaveFiles", DbType="Bit NOT NULL")]
		public bool PublicMatchFormSaveFiles
		{
			get
			{
				return this._PublicMatchFormSaveFiles;
			}
			set
			{
				if ((this._PublicMatchFormSaveFiles != value))
				{
					this.OnPublicMatchFormSaveFilesChanging(value);
					this.SendPropertyChanging();
					this._PublicMatchFormSaveFiles = value;
					this.SendPropertyChanged("PublicMatchFormSaveFiles");
					this.OnPublicMatchFormSaveFilesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_MatchFormAction", Storage="_MatchFormAction", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<MatchFormAction> MatchFormAction
		{
			get
			{
				return this._MatchFormAction;
			}
			set
			{
				this._MatchFormAction.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_MatchSession", Storage="_MatchSession", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<MatchSession> MatchSession
		{
			get
			{
				return this._MatchSession;
			}
			set
			{
				this._MatchSession.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_WatchFolder", Storage="_WatchFolder", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<WatchFolder> WatchFolder
		{
			get
			{
				return this._WatchFolder;
			}
			set
			{
				this._WatchFolder.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchFormAction(MatchFormAction entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_MatchFormAction(MatchFormAction entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_MatchSession(MatchSession entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_MatchSession(MatchSession entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_WatchFolder(WatchFolder entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_WatchFolder(WatchFolder entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="MatchFormActions")]
	public partial class MatchFormAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GameId;
		
		private int _ActionObjectId;
		
		private bool _WarActivated;
		
		private bool _PublicActivated;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<ActionObject> _ActionObject;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnActionObjectIdChanging(int value);
    partial void OnActionObjectIdChanged();
    partial void OnWarActivatedChanging(bool value);
    partial void OnWarActivatedChanged();
    partial void OnPublicActivatedChanging(bool value);
    partial void OnPublicActivatedChanged();
    #endregion
		
		public MatchFormAction()
		{
			this._Game = default(EntityRef<Game>);
			this._ActionObject = default(EntityRef<ActionObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionObjectId", DbType="Int NOT NULL")]
		public int ActionObjectId
		{
			get
			{
				return this._ActionObjectId;
			}
			set
			{
				if ((this._ActionObjectId != value))
				{
					if (this._ActionObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ActionObjectId = value;
					this.SendPropertyChanged("ActionObjectId");
					this.OnActionObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarActivated", DbType="Bit NOT NULL")]
		public bool WarActivated
		{
			get
			{
				return this._WarActivated;
			}
			set
			{
				if ((this._WarActivated != value))
				{
					this.OnWarActivatedChanging(value);
					this.SendPropertyChanging();
					this._WarActivated = value;
					this.SendPropertyChanged("WarActivated");
					this.OnWarActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicActivated", DbType="Bit NOT NULL")]
		public bool PublicActivated
		{
			get
			{
				return this._PublicActivated;
			}
			set
			{
				if ((this._PublicActivated != value))
				{
					this.OnPublicActivatedChanging(value);
					this.SendPropertyChanging();
					this._PublicActivated = value;
					this.SendPropertyChanged("PublicActivated");
					this.OnPublicActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_MatchFormAction", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.MatchFormAction.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.MatchFormAction.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionObject_MatchFormAction", Storage="_ActionObject", ThisKey="ActionObjectId", OtherKey="Id", IsForeignKey=true)]
		public ActionObject ActionObject
		{
			get
			{
				return this._ActionObject.Entity;
			}
			set
			{
				if ((this._ActionObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._ActionObject.Entity = value;
					this.SendPropertyChanged("ActionObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Matchmedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id = default(int);
		
		private string _Name;
		
		private string _Type;
		
		private int _MatchSessionId;
		
		private string _Map;
		
		private string _Path;
		
		private System.DateTime _Created;
		
		private int _PlayerId;
		
		private EntitySet<Matchmedia_Tag> _Matchmedia_Tag;
		
		private EntityRef<MatchSession> _MatchSession;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<MatchSessions_Player> _MatchSessions_Player;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnMatchSessionIdChanging(int value);
    partial void OnMatchSessionIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    #endregion
		
		public Matchmedia()
		{
			this._Matchmedia_Tag = new EntitySet<Matchmedia_Tag>(new Action<Matchmedia_Tag>(this.attach_Matchmedia_Tag), new Action<Matchmedia_Tag>(this.detach_Matchmedia_Tag));
			this._MatchSession = default(EntityRef<MatchSession>);
			this._Player = default(EntityRef<Player>);
			this._MatchSessions_Player = default(EntityRef<MatchSessions_Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchSessionId", DbType="Int NOT NULL")]
		public int MatchSessionId
		{
			get
			{
				return this._MatchSessionId;
			}
			set
			{
				if ((this._MatchSessionId != value))
				{
					if ((this._MatchSession.HasLoadedOrAssignedValue || this._MatchSessions_Player.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchSessionIdChanging(value);
					this.SendPropertyChanging();
					this._MatchSessionId = value;
					this.SendPropertyChanged("MatchSessionId");
					this.OnMatchSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(100)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(1000)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._Player.HasLoadedOrAssignedValue || this._MatchSessions_Player.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matchmedia_Matchmedia_Tag", Storage="_Matchmedia_Tag", ThisKey="Id", OtherKey="MatchmediaId")]
		public EntitySet<Matchmedia_Tag> Matchmedia_Tag
		{
			get
			{
				return this._Matchmedia_Tag;
			}
			set
			{
				this._Matchmedia_Tag.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSession_Matchmedia", Storage="_MatchSession", ThisKey="MatchSessionId", OtherKey="Id", IsForeignKey=true)]
		public MatchSession MatchSession
		{
			get
			{
				return this._MatchSession.Entity;
			}
			set
			{
				MatchSession previousValue = this._MatchSession.Entity;
				if (((previousValue != value) 
							|| (this._MatchSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchSession.Entity = null;
						previousValue.Matchmedia.Remove(this);
					}
					this._MatchSession.Entity = value;
					if ((value != null))
					{
						value.Matchmedia.Add(this);
						this._MatchSessionId = value.Id;
					}
					else
					{
						this._MatchSessionId = default(int);
					}
					this.SendPropertyChanged("MatchSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Matchmedia", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Matchmedia.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Matchmedia.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSessions_Player_Matchmedia", Storage="_MatchSessions_Player", ThisKey="MatchSessionId,PlayerId", OtherKey="MatchSessionId,PlayerId", IsForeignKey=true)]
		public MatchSessions_Player MatchSessions_Player
		{
			get
			{
				return this._MatchSessions_Player.Entity;
			}
			set
			{
				MatchSessions_Player previousValue = this._MatchSessions_Player.Entity;
				if (((previousValue != value) 
							|| (this._MatchSessions_Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchSessions_Player.Entity = null;
						previousValue.Matchmedia.Remove(this);
					}
					this._MatchSessions_Player.Entity = value;
					if ((value != null))
					{
						value.Matchmedia.Add(this);
						this._MatchSessionId = value.MatchSessionId;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchSessionId = default(int);
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("MatchSessions_Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matchmedia_Tag(Matchmedia_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Matchmedia = this;
		}
		
		private void detach_Matchmedia_Tag(Matchmedia_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Matchmedia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Matchmedia_Tags")]
	public partial class Matchmedia_Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchmediaId;
		
		private int _TagId;
		
		private EntityRef<Matchmedia> _Matchmedia;
		
		private EntityRef<Tag> _Tag;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchmediaIdChanging(int value);
    partial void OnMatchmediaIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public Matchmedia_Tag()
		{
			this._Matchmedia = default(EntityRef<Matchmedia>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchmediaId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MatchmediaId
		{
			get
			{
				return this._MatchmediaId;
			}
			set
			{
				if ((this._MatchmediaId != value))
				{
					if (this._Matchmedia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchmediaIdChanging(value);
					this.SendPropertyChanging();
					this._MatchmediaId = value;
					this.SendPropertyChanged("MatchmediaId");
					this.OnMatchmediaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matchmedia_Matchmedia_Tag", Storage="_Matchmedia", ThisKey="MatchmediaId", OtherKey="Id", IsForeignKey=true)]
		public Matchmedia Matchmedia
		{
			get
			{
				return this._Matchmedia.Entity;
			}
			set
			{
				Matchmedia previousValue = this._Matchmedia.Entity;
				if (((previousValue != value) 
							|| (this._Matchmedia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Matchmedia.Entity = null;
						previousValue.Matchmedia_Tag.Remove(this);
					}
					this._Matchmedia.Entity = value;
					if ((value != null))
					{
						value.Matchmedia_Tag.Add(this);
						this._MatchmediaId = value.Id;
					}
					else
					{
						this._MatchmediaId = default(int);
					}
					this.SendPropertyChanged("Matchmedia");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Matchmedia_Tag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Matchmedia_Tag.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Matchmedia_Tag.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="MatchSessions")]
	public partial class MatchSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GameId;
		
		private System.DateTime _Startdate;
		
		private int _Duration;
		
		private string _EslMatchLink;
		
		private string _Name;
		
		private EntitySet<Matchmedia> _Matchmedia;
		
		private EntitySet<MatchSessions_Player> _MatchSessions_Player;
		
		private EntitySet<MatchSessions_Tag> _MatchSessions_Tag;
		
		private EntityRef<Game> _Game;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnStartdateChanging(System.DateTime value);
    partial void OnStartdateChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnEslMatchLinkChanging(string value);
    partial void OnEslMatchLinkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MatchSession()
		{
			this._Matchmedia = new EntitySet<Matchmedia>(new Action<Matchmedia>(this.attach_Matchmedia), new Action<Matchmedia>(this.detach_Matchmedia));
			this._MatchSessions_Player = new EntitySet<MatchSessions_Player>(new Action<MatchSessions_Player>(this.attach_MatchSessions_Player), new Action<MatchSessions_Player>(this.detach_MatchSessions_Player));
			this._MatchSessions_Tag = new EntitySet<MatchSessions_Tag>(new Action<MatchSessions_Tag>(this.attach_MatchSessions_Tag), new Action<MatchSessions_Tag>(this.detach_MatchSessions_Tag));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Startdate", DbType="DateTime NOT NULL")]
		public System.DateTime Startdate
		{
			get
			{
				return this._Startdate;
			}
			set
			{
				if ((this._Startdate != value))
				{
					this.OnStartdateChanging(value);
					this.SendPropertyChanging();
					this._Startdate = value;
					this.SendPropertyChanged("Startdate");
					this.OnStartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EslMatchLink", DbType="NVarChar(1000)")]
		public string EslMatchLink
		{
			get
			{
				return this._EslMatchLink;
			}
			set
			{
				if ((this._EslMatchLink != value))
				{
					this.OnEslMatchLinkChanging(value);
					this.SendPropertyChanging();
					this._EslMatchLink = value;
					this.SendPropertyChanged("EslMatchLink");
					this.OnEslMatchLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSession_Matchmedia", Storage="_Matchmedia", ThisKey="Id", OtherKey="MatchSessionId")]
		public EntitySet<Matchmedia> Matchmedia
		{
			get
			{
				return this._Matchmedia;
			}
			set
			{
				this._Matchmedia.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSession_MatchSessions_Player", Storage="_MatchSessions_Player", ThisKey="Id", OtherKey="MatchSessionId")]
		public EntitySet<MatchSessions_Player> MatchSessions_Player
		{
			get
			{
				return this._MatchSessions_Player;
			}
			set
			{
				this._MatchSessions_Player.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSession_MatchSessions_Tag", Storage="_MatchSessions_Tag", ThisKey="Id", OtherKey="MatchSessionId")]
		public EntitySet<MatchSessions_Tag> MatchSessions_Tag
		{
			get
			{
				return this._MatchSessions_Tag;
			}
			set
			{
				this._MatchSessions_Tag.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_MatchSession", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.MatchSession.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.MatchSession.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matchmedia(Matchmedia entity)
		{
			this.SendPropertyChanging();
			entity.MatchSession = this;
		}
		
		private void detach_Matchmedia(Matchmedia entity)
		{
			this.SendPropertyChanging();
			entity.MatchSession = null;
		}
		
		private void attach_MatchSessions_Player(MatchSessions_Player entity)
		{
			this.SendPropertyChanging();
			entity.MatchSession = this;
		}
		
		private void detach_MatchSessions_Player(MatchSessions_Player entity)
		{
			this.SendPropertyChanging();
			entity.MatchSession = null;
		}
		
		private void attach_MatchSessions_Tag(MatchSessions_Tag entity)
		{
			this.SendPropertyChanging();
			entity.MatchSession = this;
		}
		
		private void detach_MatchSessions_Tag(MatchSessions_Tag entity)
		{
			this.SendPropertyChanging();
			entity.MatchSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="MatchSessions_Players")]
	public partial class MatchSessions_Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchSessionId;
		
		private int _PlayerId;
		
		private byte _Team;
		
		private System.Nullable<byte> _Skill;
		
		private string _Description;
		
		private bool _Cheating;
		
		private EntitySet<Matchmedia> _Matchmedia;
		
		private EntityRef<MatchSession> _MatchSession;
		
		private EntityRef<Player> _Player;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchSessionIdChanging(int value);
    partial void OnMatchSessionIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnTeamChanging(byte value);
    partial void OnTeamChanged();
    partial void OnSkillChanging(System.Nullable<byte> value);
    partial void OnSkillChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCheatingChanging(bool value);
    partial void OnCheatingChanged();
    #endregion
		
		public MatchSessions_Player()
		{
			this._Matchmedia = new EntitySet<Matchmedia>(new Action<Matchmedia>(this.attach_Matchmedia), new Action<Matchmedia>(this.detach_Matchmedia));
			this._MatchSession = default(EntityRef<MatchSession>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchSessionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MatchSessionId
		{
			get
			{
				return this._MatchSessionId;
			}
			set
			{
				if ((this._MatchSessionId != value))
				{
					if (this._MatchSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchSessionIdChanging(value);
					this.SendPropertyChanging();
					this._MatchSessionId = value;
					this.SendPropertyChanged("MatchSessionId");
					this.OnMatchSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="TinyInt NOT NULL")]
		public byte Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skill", DbType="TinyInt")]
		public System.Nullable<byte> Skill
		{
			get
			{
				return this._Skill;
			}
			set
			{
				if ((this._Skill != value))
				{
					this.OnSkillChanging(value);
					this.SendPropertyChanging();
					this._Skill = value;
					this.SendPropertyChanged("Skill");
					this.OnSkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cheating", DbType="Bit NOT NULL")]
		public bool Cheating
		{
			get
			{
				return this._Cheating;
			}
			set
			{
				if ((this._Cheating != value))
				{
					this.OnCheatingChanging(value);
					this.SendPropertyChanging();
					this._Cheating = value;
					this.SendPropertyChanged("Cheating");
					this.OnCheatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSessions_Player_Matchmedia", Storage="_Matchmedia", ThisKey="MatchSessionId,PlayerId", OtherKey="MatchSessionId,PlayerId")]
		public EntitySet<Matchmedia> Matchmedia
		{
			get
			{
				return this._Matchmedia;
			}
			set
			{
				this._Matchmedia.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSession_MatchSessions_Player", Storage="_MatchSession", ThisKey="MatchSessionId", OtherKey="Id", IsForeignKey=true)]
		public MatchSession MatchSession
		{
			get
			{
				return this._MatchSession.Entity;
			}
			set
			{
				MatchSession previousValue = this._MatchSession.Entity;
				if (((previousValue != value) 
							|| (this._MatchSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchSession.Entity = null;
						previousValue.MatchSessions_Player.Remove(this);
					}
					this._MatchSession.Entity = value;
					if ((value != null))
					{
						value.MatchSessions_Player.Add(this);
						this._MatchSessionId = value.Id;
					}
					else
					{
						this._MatchSessionId = default(int);
					}
					this.SendPropertyChanged("MatchSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchSessions_Player", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MatchSessions_Player.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MatchSessions_Player.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matchmedia(Matchmedia entity)
		{
			this.SendPropertyChanging();
			entity.MatchSessions_Player = this;
		}
		
		private void detach_Matchmedia(Matchmedia entity)
		{
			this.SendPropertyChanging();
			entity.MatchSessions_Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="MatchSessions_Tags")]
	public partial class MatchSessions_Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchSessionId;
		
		private int _TagId;
		
		private EntityRef<MatchSession> _MatchSession;
		
		private EntityRef<Tag> _Tag;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchSessionIdChanging(int value);
    partial void OnMatchSessionIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public MatchSessions_Tag()
		{
			this._MatchSession = default(EntityRef<MatchSession>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchSessionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MatchSessionId
		{
			get
			{
				return this._MatchSessionId;
			}
			set
			{
				if ((this._MatchSessionId != value))
				{
					if (this._MatchSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchSessionIdChanging(value);
					this.SendPropertyChanging();
					this._MatchSessionId = value;
					this.SendPropertyChanged("MatchSessionId");
					this.OnMatchSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchSession_MatchSessions_Tag", Storage="_MatchSession", ThisKey="MatchSessionId", OtherKey="Id", IsForeignKey=true)]
		public MatchSession MatchSession
		{
			get
			{
				return this._MatchSession.Entity;
			}
			set
			{
				MatchSession previousValue = this._MatchSession.Entity;
				if (((previousValue != value) 
							|| (this._MatchSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchSession.Entity = null;
						previousValue.MatchSessions_Tag.Remove(this);
					}
					this._MatchSession.Entity = value;
					if ((value != null))
					{
						value.MatchSessions_Tag.Add(this);
						this._MatchSessionId = value.Id;
					}
					else
					{
						this._MatchSessionId = default(int);
					}
					this.SendPropertyChanged("MatchSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_MatchSessions_Tag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.MatchSessions_Tag.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.MatchSessions_Tag.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class ObjectParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ObjectId;
		
		private byte _ParamNum;
		
		private string _Parameter;
		
		private EntityRef<ActionObject> _ActionObject;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnObjectIdChanging(int value);
    partial void OnObjectIdChanged();
    partial void OnParamNumChanging(byte value);
    partial void OnParamNumChanged();
    partial void OnParameterChanging(string value);
    partial void OnParameterChanged();
    #endregion
		
		public ObjectParameter()
		{
			this._ActionObject = default(EntityRef<ActionObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="Int NOT NULL")]
		public int ObjectId
		{
			get
			{
				return this._ObjectId;
			}
			set
			{
				if ((this._ObjectId != value))
				{
					if (this._ActionObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectId = value;
					this.SendPropertyChanged("ObjectId");
					this.OnObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParamNum", DbType="TinyInt NOT NULL")]
		public byte ParamNum
		{
			get
			{
				return this._ParamNum;
			}
			set
			{
				if ((this._ParamNum != value))
				{
					this.OnParamNumChanging(value);
					this.SendPropertyChanging();
					this._ParamNum = value;
					this.SendPropertyChanged("ParamNum");
					this.OnParamNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameter", DbType="NVarChar(4000)")]
		public string Parameter
		{
			get
			{
				return this._Parameter;
			}
			set
			{
				if ((this._Parameter != value))
				{
					this.OnParameterChanging(value);
					this.SendPropertyChanging();
					this._Parameter = value;
					this.SendPropertyChanged("Parameter");
					this.OnParameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionObject_ObjectParameter", Storage="_ActionObject", ThisKey="ObjectId", OtherKey="Id", IsForeignKey=true)]
		public ActionObject ActionObject
		{
			get
			{
				return this._ActionObject.Entity;
			}
			set
			{
				ActionObject previousValue = this._ActionObject.Entity;
				if (((previousValue != value) 
							|| (this._ActionObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionObject.Entity = null;
						previousValue.ObjectParameter.Remove(this);
					}
					this._ActionObject.Entity = value;
					if ((value != null))
					{
						value.ObjectParameter.Add(this);
						this._ObjectId = value.Id;
					}
					else
					{
						this._ObjectId = default(int);
					}
					this.SendPropertyChanged("ActionObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Player_Tags")]
	public partial class Player_Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private int _TagId;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Tag> _Tag;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public Player_Tag()
		{
			this._Player = default(EntityRef<Player>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Player_Tag", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Player_Tag.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Player_Tag.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Player_Tag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Player_Tag.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Player_Tag.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _EslPlayerId;
		
		private EntitySet<Matchmedia> _Matchmedia;
		
		private EntitySet<MatchSessions_Player> _MatchSessions_Player;
		
		private EntitySet<Player_Tag> _Player_Tag;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEslPlayerIdChanging(System.Nullable<int> value);
    partial void OnEslPlayerIdChanged();
    #endregion
		
		public Player()
		{
			this._Matchmedia = new EntitySet<Matchmedia>(new Action<Matchmedia>(this.attach_Matchmedia), new Action<Matchmedia>(this.detach_Matchmedia));
			this._MatchSessions_Player = new EntitySet<MatchSessions_Player>(new Action<MatchSessions_Player>(this.attach_MatchSessions_Player), new Action<MatchSessions_Player>(this.detach_MatchSessions_Player));
			this._Player_Tag = new EntitySet<Player_Tag>(new Action<Player_Tag>(this.attach_Player_Tag), new Action<Player_Tag>(this.detach_Player_Tag));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EslPlayerId", DbType="Int")]
		public System.Nullable<int> EslPlayerId
		{
			get
			{
				return this._EslPlayerId;
			}
			set
			{
				if ((this._EslPlayerId != value))
				{
					this.OnEslPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._EslPlayerId = value;
					this.SendPropertyChanged("EslPlayerId");
					this.OnEslPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Matchmedia", Storage="_Matchmedia", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<Matchmedia> Matchmedia
		{
			get
			{
				return this._Matchmedia;
			}
			set
			{
				this._Matchmedia.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_MatchSessions_Player", Storage="_MatchSessions_Player", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<MatchSessions_Player> MatchSessions_Player
		{
			get
			{
				return this._MatchSessions_Player;
			}
			set
			{
				this._MatchSessions_Player.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Player_Tag", Storage="_Player_Tag", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<Player_Tag> Player_Tag
		{
			get
			{
				return this._Player_Tag;
			}
			set
			{
				this._Player_Tag.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matchmedia(Matchmedia entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Matchmedia(Matchmedia entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_MatchSessions_Player(MatchSessions_Player entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MatchSessions_Player(MatchSessions_Player entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_Player_Tag(Player_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Player_Tag(Player_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Matchmedia_Tag> _Matchmedia_Tag;
		
		private EntitySet<MatchSessions_Tag> _MatchSessions_Tag;
		
		private EntitySet<Player_Tag> _Player_Tag;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tag()
		{
			this._Matchmedia_Tag = new EntitySet<Matchmedia_Tag>(new Action<Matchmedia_Tag>(this.attach_Matchmedia_Tag), new Action<Matchmedia_Tag>(this.detach_Matchmedia_Tag));
			this._MatchSessions_Tag = new EntitySet<MatchSessions_Tag>(new Action<MatchSessions_Tag>(this.attach_MatchSessions_Tag), new Action<MatchSessions_Tag>(this.detach_MatchSessions_Tag));
			this._Player_Tag = new EntitySet<Player_Tag>(new Action<Player_Tag>(this.attach_Player_Tag), new Action<Player_Tag>(this.detach_Player_Tag));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL UNIQUE", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Matchmedia_Tag", Storage="_Matchmedia_Tag", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<Matchmedia_Tag> Matchmedia_Tag
		{
			get
			{
				return this._Matchmedia_Tag;
			}
			set
			{
				this._Matchmedia_Tag.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_MatchSessions_Tag", Storage="_MatchSessions_Tag", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<MatchSessions_Tag> MatchSessions_Tag
		{
			get
			{
				return this._MatchSessions_Tag;
			}
			set
			{
				this._MatchSessions_Tag.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Player_Tag", Storage="_Player_Tag", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<Player_Tag> Player_Tag
		{
			get
			{
				return this._Player_Tag;
			}
			set
			{
				this._Player_Tag.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matchmedia_Tag(Matchmedia_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Matchmedia_Tag(Matchmedia_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_MatchSessions_Tag(MatchSessions_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_MatchSessions_Tag(MatchSessions_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_Player_Tag(Player_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Player_Tag(Player_Tag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class WatchFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GameId;
		
		private string _Folder;
		
		private string _Filter;
		
		private System.Nullable<int> _NotifyOnInativity;
		
		private EntityRef<Game> _Game;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnFolderChanging(string value);
    partial void OnFolderChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    partial void OnNotifyOnInactivityChanging(System.Nullable<int> value);
    partial void OnNotifyOnInactivityChanged();
    #endregion
		
		public WatchFolder()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Folder", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Folder
		{
			get
			{
				return this._Folder;
			}
			set
			{
				if ((this._Folder != value))
				{
					this.OnFolderChanging(value);
					this.SendPropertyChanging();
					this._Folder = value;
					this.SendPropertyChanged("Folder");
					this.OnFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="NVarChar(100)")]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyOnInativity", DbType="Int")]
		public System.Nullable<int> NotifyOnInactivity
		{
			get
			{
				return this._NotifyOnInativity;
			}
			set
			{
				if ((this._NotifyOnInativity != value))
				{
					this.OnNotifyOnInactivityChanging(value);
					this.SendPropertyChanging();
					this._NotifyOnInativity = value;
					this.SendPropertyChanged("NotifyOnInactivity");
					this.OnNotifyOnInactivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_WatchFolder", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.WatchFolder.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.WatchFolder.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
